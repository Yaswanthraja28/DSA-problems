#brute force apporoach
def longestOnes(nums, k):
    n = len(nums)
    max_len = 0
    for i in range(n):
        zeros = 0
        for j in range(i,n):
            if (nums[j] == 0):
                zeros+=1
            if (zeros<=k):
                max_len = max(max_len,j-i+1) 
            else:
                break
    return max_len 

nums = [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1]
k = 2

result = longestOnes(nums,k)
print(result)

#two pointer 
def longestOnes(nums, k):
    n = len(nums)
    l = 0
    maxlen = 0
    zeros = 0
    
    for r in range(l,n):
        if nums[r]==0:
            zeros+=1
            
        while zeros>k:
            if nums[l]==0:
                zeros-=1
            l+=1
            
        maxlen = max(maxlen,r-l+1)
    return maxlen                             

nums = [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1]
k = 2

result = longestOnes(nums,k)
print(result)    

#sliding window
def longestOnes(nums, k):
    n = len(nums)
    r =0
    l = 0
    maxlen = 0
    zeros = 0
    
    while r<n:
        if nums[r]==0:
            zeros+=1
            
        while zeros > k:
            if nums[l]==0:
                zeros-=1
            l+=1 
            
        maxlen = max(maxlen,r-l+1)
        r+=1
        
    return maxlen                                           
                                 

nums = [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1]
k = 2

result = longestOnes(nums,k)
print(result)
